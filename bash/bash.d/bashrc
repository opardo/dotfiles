#
# Path
#
export PATH=/opt/local/bin:/opt/local/sbin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/Library/Frameworks/Python.framework/Versions/2.7/bin:/Library/Frameworks/Python.framework/Versions/3.3/bin:/usr/bin:/usr/sbin:/usr/texbin:/bin:/sbin:$PATH

#
# Aliases
#
alias ls='ls -lGF'
alias lsall='ls -flaF'
alias matlab='/Applications/MATLAB_R2013a.app/bin/matlab -nosplash -nodesktop'
alias show='qlmanage -p'

#
# Functions
#

# Calculator
function calc() {
    local result=""
    result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
    #                       └─ default (when `--mathlib` is used) is 20
    #
    if [[ "$result" == *.* ]]; then
        # Improve the output for decimal numbers
        printf "$result" |
        sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
            -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
                    -e 's/0*$//;s/\.$//'   # Remove trailing zeros
    else
        printf "$result"
    fi
    printf "\n"
}

# Size of file or directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* *
    fi
}

# Compare original and gzipped file size
function gz() {
    local origsize=$(wc -c < "$1")
    local gzipsize=$(gzip -c "$1" | wc -c)
    local ratio=$(echo "$gzipsize * 100/ $origsize" | bc -l)
    printf "orig: %d bytes\n" "$origsize"
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Add note to Notes.app (OS X 10.8). Title is optional.
# Usage: 'note 'title' 'body'' or 'echo 'body' | note'
function note() {
    local title
    local body
    if [ -t 0 ]; then
        title="$1"
        body="$2"
    else
        title=$(cat)
    fi
    osascript >/dev/null <<EOF
tell application "Notes"
        tell account "iCloud"
                tell folder "Notes"
                        make new note with properties {name:"$title", body:"$title" & "<br><br>" & "$body"}
                end tell
        end tell
end tell
EOF
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: 'remind 'foo'' or 'echo 'foo' | remind'
function remind() {
    local text
    if [ -t 0 ]; then
        text="$1" # argument
    else
        text=$(cat) # pipe
    fi
    osascript >/dev/null <<EOF
tell application "Reminders"
        tell the default list
                make new reminder with properties {name:"$text"}
        end tell
end tell
EOF
}

# 'o' with no arguments opens current directory, 
# otherwise opens the given location
function o() {
    if [ $# -eq 0 ]; then
        open .
    else
        open "$@"
    fi
}

# 'tre' is a shorthand for 'tree' with hidden files and color 
# enabled, ignoring the '.git' directory, listing directories first. 
# The output gets piped into 'less' with options to preserve color 
# and line numbers, unless the output is small enough for one screen.
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

# Add alias
add-alias ()
{
   local name=$1 value=$2
   echo "alias $name='$value'" >> ~/.bashrc
   eval "alias $name='$value'"
   alias $name
}
