%
% Programacion Cuadratica Convexa
% Metodo: Region Activa
%
% Omar Trejo Navarro, 119711
% Natalia Orozco Urquijo, 111008
% Juan Pedro Luengas Garcia, 119493
%
% Marzo, 2015
%
% Dr. Zeferino Parada
% Optimizacion Numerica
% ITAM
%
% El algoritmo que programamos aqui es el que se
% encuentra en Nocedal - "Numerical Optimization",
% pg. 472, para resolver el problema:
%
%     min 1/2 x'Qx + x'c
%     s.a. Ax = b
%          Fx >= d
%
% In:
% - Q: matriz simetrica positiva definida en R^nxn.
% - A: matriz en R^mxn de rango m con m <= n.
% - F: matriz en R^sxn.
% - c: vector en R^n.
% - b: vector en R^m.
% - d: vector en R^s.
%
% Out:
% - fx: valor de f(x*) en R.
% - x: x*, vector de solucion optima en R^n.
% - W: conjunto de restricciones activas en x*.
% - lambda: vector de lambdas en la solucion optima.
% - k: numero de iteraciones realizadas.
%
function [iter,x] = ConjActivo(Q,A,F,c,b,d)
% Punto inicial
    options = optimset('Display','none');
    x = linprog(c,-F,-d,A,b,[],[],[],options);
    tol = 10.e-06;
    m = length(x);
    [n,~] = size(F);
    [n2,~] = size(A);
    bandera = 0;
    I = zeros(1,n);
    iter = 0;
    while bandera==0
        g = Q*x + c;
        f = [A ; F((I==1),:)];
        K = [Q,f';f,zeros(sum(I)+n2)];
        ld = [-g;zeros(sum(I)+n2,1)];
        res = linsolve(K,ld);
        p = res(1:m);
        lambda_des = res(m+n2+1: end);
        if norm(p)<=tol
            if sum(I) == 0
                bandera = 1;
            else
                if lambda_des <= 0
                    bandera = 1;
                else
                    if (~isempty(lambda_des))
                        rest_activ = find(I);
                        lam_max = find(lambda_des==max(lambda_des));
                        I(rest_activ(lam_max(1))) = 0;
                    end
                end
            end
        else
            k = F*p;
            w = (k<0).*(1-I)';
            if (sum(w)>0)
                aux = [find(w),nan(sum(w),1)];
                for i=1:sum(w)
                    aux(i,2)= max((d(aux(i,1))-F(aux(i,1),:)*x)/k(aux(i,1)),1.e-8);
                end
                alpha = min(min(aux(:,2)),1);
                if alpha < 1
                    [~,i] = min(aux(:,2));
                    I(aux(i,1)) = 1;
                end
            else
                alpha = 1;
            end
            x = x + alpha*p;
        end
        iter = iter + 1;
    end
end

